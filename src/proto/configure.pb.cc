// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "configure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ocean {
namespace ai {
namespace va {

namespace {

const ::google::protobuf::Descriptor* RunTimeParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunTimeParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_configure_2eproto() {
  protobuf_AddDesc_configure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "configure.proto");
  GOOGLE_CHECK(file != NULL);
  RunTimeParams_descriptor_ = file->message_type(0);
  static const int RunTimeParams_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, circular_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, syncqueue_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, detect_batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, object_max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, block_interval_),
  };
  RunTimeParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunTimeParams_descriptor_,
      RunTimeParams::default_instance_,
      RunTimeParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunTimeParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunTimeParams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_configure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunTimeParams_descriptor_, &RunTimeParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_configure_2eproto() {
  delete RunTimeParams::default_instance_;
  delete RunTimeParams_reflection_;
}

void protobuf_AddDesc_configure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017configure.proto\022\013ocean.ai.va\"\270\001\n\rRunTi"
    "meParams\022\020\n\010log_file\030\001 \001(\t\022!\n\024circular_b"
    "uffer_size\030\002 \001(\005:\003100\022\035\n\016syncqueue_size\030"
    "\003 \001(\005:\00510000\022\034\n\021detect_batch_size\030\004 \001(\005:"
    "\0011\022\032\n\016object_max_num\030\005 \001(\005:\00232\022\031\n\016block_"
    "interval\030\006 \001(\005:\0015", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "configure.proto", &protobuf_RegisterTypes);
  RunTimeParams::default_instance_ = new RunTimeParams();
  RunTimeParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_configure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_configure_2eproto {
  StaticDescriptorInitializer_configure_2eproto() {
    protobuf_AddDesc_configure_2eproto();
  }
} static_descriptor_initializer_configure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RunTimeParams::kLogFileFieldNumber;
const int RunTimeParams::kCircularBufferSizeFieldNumber;
const int RunTimeParams::kSyncqueueSizeFieldNumber;
const int RunTimeParams::kDetectBatchSizeFieldNumber;
const int RunTimeParams::kObjectMaxNumFieldNumber;
const int RunTimeParams::kBlockIntervalFieldNumber;
#endif  // !_MSC_VER

RunTimeParams::RunTimeParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ocean.ai.va.RunTimeParams)
}

void RunTimeParams::InitAsDefaultInstance() {
}

RunTimeParams::RunTimeParams(const RunTimeParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ocean.ai.va.RunTimeParams)
}

void RunTimeParams::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  circular_buffer_size_ = 100;
  syncqueue_size_ = 10000;
  detect_batch_size_ = 1;
  object_max_num_ = 32;
  block_interval_ = 5;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunTimeParams::~RunTimeParams() {
  // @@protoc_insertion_point(destructor:ocean.ai.va.RunTimeParams)
  SharedDtor();
}

void RunTimeParams::SharedDtor() {
  if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_file_;
  }
  if (this != default_instance_) {
  }
}

void RunTimeParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunTimeParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunTimeParams_descriptor_;
}

const RunTimeParams& RunTimeParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();
  return *default_instance_;
}

RunTimeParams* RunTimeParams::default_instance_ = NULL;

RunTimeParams* RunTimeParams::New() const {
  return new RunTimeParams;
}

void RunTimeParams::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_log_file()) {
      if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_file_->clear();
      }
    }
    circular_buffer_size_ = 100;
    syncqueue_size_ = 10000;
    detect_batch_size_ = 1;
    object_max_num_ = 32;
    block_interval_ = 5;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunTimeParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ocean.ai.va.RunTimeParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string log_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_file().data(), this->log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_circular_buffer_size;
        break;
      }

      // optional int32 circular_buffer_size = 2 [default = 100];
      case 2: {
        if (tag == 16) {
         parse_circular_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &circular_buffer_size_)));
          set_has_circular_buffer_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_syncqueue_size;
        break;
      }

      // optional int32 syncqueue_size = 3 [default = 10000];
      case 3: {
        if (tag == 24) {
         parse_syncqueue_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syncqueue_size_)));
          set_has_syncqueue_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_detect_batch_size;
        break;
      }

      // optional int32 detect_batch_size = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_detect_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detect_batch_size_)));
          set_has_detect_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_object_max_num;
        break;
      }

      // optional int32 object_max_num = 5 [default = 32];
      case 5: {
        if (tag == 40) {
         parse_object_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &object_max_num_)));
          set_has_object_max_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_block_interval;
        break;
      }

      // optional int32 block_interval = 6 [default = 5];
      case 6: {
        if (tag == 48) {
         parse_block_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_interval_)));
          set_has_block_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ocean.ai.va.RunTimeParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ocean.ai.va.RunTimeParams)
  return false;
#undef DO_
}

void RunTimeParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ocean.ai.va.RunTimeParams)
  // optional string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->log_file(), output);
  }

  // optional int32 circular_buffer_size = 2 [default = 100];
  if (has_circular_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->circular_buffer_size(), output);
  }

  // optional int32 syncqueue_size = 3 [default = 10000];
  if (has_syncqueue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->syncqueue_size(), output);
  }

  // optional int32 detect_batch_size = 4 [default = 1];
  if (has_detect_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->detect_batch_size(), output);
  }

  // optional int32 object_max_num = 5 [default = 32];
  if (has_object_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->object_max_num(), output);
  }

  // optional int32 block_interval = 6 [default = 5];
  if (has_block_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->block_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ocean.ai.va.RunTimeParams)
}

::google::protobuf::uint8* RunTimeParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ocean.ai.va.RunTimeParams)
  // optional string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_file(), target);
  }

  // optional int32 circular_buffer_size = 2 [default = 100];
  if (has_circular_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->circular_buffer_size(), target);
  }

  // optional int32 syncqueue_size = 3 [default = 10000];
  if (has_syncqueue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->syncqueue_size(), target);
  }

  // optional int32 detect_batch_size = 4 [default = 1];
  if (has_detect_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->detect_batch_size(), target);
  }

  // optional int32 object_max_num = 5 [default = 32];
  if (has_object_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->object_max_num(), target);
  }

  // optional int32 block_interval = 6 [default = 5];
  if (has_block_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->block_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ocean.ai.va.RunTimeParams)
  return target;
}

int RunTimeParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string log_file = 1;
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_file());
    }

    // optional int32 circular_buffer_size = 2 [default = 100];
    if (has_circular_buffer_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->circular_buffer_size());
    }

    // optional int32 syncqueue_size = 3 [default = 10000];
    if (has_syncqueue_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->syncqueue_size());
    }

    // optional int32 detect_batch_size = 4 [default = 1];
    if (has_detect_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detect_batch_size());
    }

    // optional int32 object_max_num = 5 [default = 32];
    if (has_object_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->object_max_num());
    }

    // optional int32 block_interval = 6 [default = 5];
    if (has_block_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunTimeParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunTimeParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunTimeParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunTimeParams::MergeFrom(const RunTimeParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_file()) {
      set_log_file(from.log_file());
    }
    if (from.has_circular_buffer_size()) {
      set_circular_buffer_size(from.circular_buffer_size());
    }
    if (from.has_syncqueue_size()) {
      set_syncqueue_size(from.syncqueue_size());
    }
    if (from.has_detect_batch_size()) {
      set_detect_batch_size(from.detect_batch_size());
    }
    if (from.has_object_max_num()) {
      set_object_max_num(from.object_max_num());
    }
    if (from.has_block_interval()) {
      set_block_interval(from.block_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunTimeParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunTimeParams::CopyFrom(const RunTimeParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunTimeParams::IsInitialized() const {

  return true;
}

void RunTimeParams::Swap(RunTimeParams* other) {
  if (other != this) {
    std::swap(log_file_, other->log_file_);
    std::swap(circular_buffer_size_, other->circular_buffer_size_);
    std::swap(syncqueue_size_, other->syncqueue_size_);
    std::swap(detect_batch_size_, other->detect_batch_size_);
    std::swap(object_max_num_, other->object_max_num_);
    std::swap(block_interval_, other->block_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunTimeParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunTimeParams_descriptor_;
  metadata.reflection = RunTimeParams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace va
}  // namespace ai
}  // namespace ocean

// @@protoc_insertion_point(global_scope)
