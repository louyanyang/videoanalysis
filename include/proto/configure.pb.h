// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configure.proto

#ifndef PROTOBUF_configure_2eproto__INCLUDED
#define PROTOBUF_configure_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ocean {
namespace ai {
namespace va {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_configure_2eproto();
void protobuf_AssignDesc_configure_2eproto();
void protobuf_ShutdownFile_configure_2eproto();

class RunTimeParams;

// ===================================================================

class RunTimeParams : public ::google::protobuf::Message {
 public:
  RunTimeParams();
  virtual ~RunTimeParams();

  RunTimeParams(const RunTimeParams& from);

  inline RunTimeParams& operator=(const RunTimeParams& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunTimeParams& default_instance();

  void Swap(RunTimeParams* other);

  // implements Message ----------------------------------------------

  RunTimeParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunTimeParams& from);
  void MergeFrom(const RunTimeParams& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string log_file = 1;
  inline bool has_log_file() const;
  inline void clear_log_file();
  static const int kLogFileFieldNumber = 1;
  inline const ::std::string& log_file() const;
  inline void set_log_file(const ::std::string& value);
  inline void set_log_file(const char* value);
  inline void set_log_file(const char* value, size_t size);
  inline ::std::string* mutable_log_file();
  inline ::std::string* release_log_file();
  inline void set_allocated_log_file(::std::string* log_file);

  // optional int32 circular_buffer_size = 2 [default = 100];
  inline bool has_circular_buffer_size() const;
  inline void clear_circular_buffer_size();
  static const int kCircularBufferSizeFieldNumber = 2;
  inline ::google::protobuf::int32 circular_buffer_size() const;
  inline void set_circular_buffer_size(::google::protobuf::int32 value);

  // optional int32 syncqueue_size = 3 [default = 10000];
  inline bool has_syncqueue_size() const;
  inline void clear_syncqueue_size();
  static const int kSyncqueueSizeFieldNumber = 3;
  inline ::google::protobuf::int32 syncqueue_size() const;
  inline void set_syncqueue_size(::google::protobuf::int32 value);

  // optional int32 detect_batch_size = 4 [default = 1];
  inline bool has_detect_batch_size() const;
  inline void clear_detect_batch_size();
  static const int kDetectBatchSizeFieldNumber = 4;
  inline ::google::protobuf::int32 detect_batch_size() const;
  inline void set_detect_batch_size(::google::protobuf::int32 value);

  // optional int32 object_max_num = 5 [default = 32];
  inline bool has_object_max_num() const;
  inline void clear_object_max_num();
  static const int kObjectMaxNumFieldNumber = 5;
  inline ::google::protobuf::int32 object_max_num() const;
  inline void set_object_max_num(::google::protobuf::int32 value);

  // optional int32 block_interval = 6 [default = 5];
  inline bool has_block_interval() const;
  inline void clear_block_interval();
  static const int kBlockIntervalFieldNumber = 6;
  inline ::google::protobuf::int32 block_interval() const;
  inline void set_block_interval(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ocean.ai.va.RunTimeParams)
 private:
  inline void set_has_log_file();
  inline void clear_has_log_file();
  inline void set_has_circular_buffer_size();
  inline void clear_has_circular_buffer_size();
  inline void set_has_syncqueue_size();
  inline void clear_has_syncqueue_size();
  inline void set_has_detect_batch_size();
  inline void clear_has_detect_batch_size();
  inline void set_has_object_max_num();
  inline void clear_has_object_max_num();
  inline void set_has_block_interval();
  inline void clear_has_block_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* log_file_;
  ::google::protobuf::int32 circular_buffer_size_;
  ::google::protobuf::int32 syncqueue_size_;
  ::google::protobuf::int32 detect_batch_size_;
  ::google::protobuf::int32 object_max_num_;
  ::google::protobuf::int32 block_interval_;
  friend void  protobuf_AddDesc_configure_2eproto();
  friend void protobuf_AssignDesc_configure_2eproto();
  friend void protobuf_ShutdownFile_configure_2eproto();

  void InitAsDefaultInstance();
  static RunTimeParams* default_instance_;
};
// ===================================================================


// ===================================================================

// RunTimeParams

// optional string log_file = 1;
inline bool RunTimeParams::has_log_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunTimeParams::set_has_log_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunTimeParams::clear_has_log_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunTimeParams::clear_log_file() {
  if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_->clear();
  }
  clear_has_log_file();
}
inline const ::std::string& RunTimeParams::log_file() const {
  // @@protoc_insertion_point(field_get:ocean.ai.va.RunTimeParams.log_file)
  return *log_file_;
}
inline void RunTimeParams::set_log_file(const ::std::string& value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
  // @@protoc_insertion_point(field_set:ocean.ai.va.RunTimeParams.log_file)
}
inline void RunTimeParams::set_log_file(const char* value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
  // @@protoc_insertion_point(field_set_char:ocean.ai.va.RunTimeParams.log_file)
}
inline void RunTimeParams::set_log_file(const char* value, size_t size) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ocean.ai.va.RunTimeParams.log_file)
}
inline ::std::string* RunTimeParams::mutable_log_file() {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    log_file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ocean.ai.va.RunTimeParams.log_file)
  return log_file_;
}
inline ::std::string* RunTimeParams::release_log_file() {
  clear_has_log_file();
  if (log_file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = log_file_;
    log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RunTimeParams::set_allocated_log_file(::std::string* log_file) {
  if (log_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_file_;
  }
  if (log_file) {
    set_has_log_file();
    log_file_ = log_file;
  } else {
    clear_has_log_file();
    log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ocean.ai.va.RunTimeParams.log_file)
}

// optional int32 circular_buffer_size = 2 [default = 100];
inline bool RunTimeParams::has_circular_buffer_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunTimeParams::set_has_circular_buffer_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunTimeParams::clear_has_circular_buffer_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunTimeParams::clear_circular_buffer_size() {
  circular_buffer_size_ = 100;
  clear_has_circular_buffer_size();
}
inline ::google::protobuf::int32 RunTimeParams::circular_buffer_size() const {
  // @@protoc_insertion_point(field_get:ocean.ai.va.RunTimeParams.circular_buffer_size)
  return circular_buffer_size_;
}
inline void RunTimeParams::set_circular_buffer_size(::google::protobuf::int32 value) {
  set_has_circular_buffer_size();
  circular_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:ocean.ai.va.RunTimeParams.circular_buffer_size)
}

// optional int32 syncqueue_size = 3 [default = 10000];
inline bool RunTimeParams::has_syncqueue_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RunTimeParams::set_has_syncqueue_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RunTimeParams::clear_has_syncqueue_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RunTimeParams::clear_syncqueue_size() {
  syncqueue_size_ = 10000;
  clear_has_syncqueue_size();
}
inline ::google::protobuf::int32 RunTimeParams::syncqueue_size() const {
  // @@protoc_insertion_point(field_get:ocean.ai.va.RunTimeParams.syncqueue_size)
  return syncqueue_size_;
}
inline void RunTimeParams::set_syncqueue_size(::google::protobuf::int32 value) {
  set_has_syncqueue_size();
  syncqueue_size_ = value;
  // @@protoc_insertion_point(field_set:ocean.ai.va.RunTimeParams.syncqueue_size)
}

// optional int32 detect_batch_size = 4 [default = 1];
inline bool RunTimeParams::has_detect_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RunTimeParams::set_has_detect_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RunTimeParams::clear_has_detect_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RunTimeParams::clear_detect_batch_size() {
  detect_batch_size_ = 1;
  clear_has_detect_batch_size();
}
inline ::google::protobuf::int32 RunTimeParams::detect_batch_size() const {
  // @@protoc_insertion_point(field_get:ocean.ai.va.RunTimeParams.detect_batch_size)
  return detect_batch_size_;
}
inline void RunTimeParams::set_detect_batch_size(::google::protobuf::int32 value) {
  set_has_detect_batch_size();
  detect_batch_size_ = value;
  // @@protoc_insertion_point(field_set:ocean.ai.va.RunTimeParams.detect_batch_size)
}

// optional int32 object_max_num = 5 [default = 32];
inline bool RunTimeParams::has_object_max_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RunTimeParams::set_has_object_max_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RunTimeParams::clear_has_object_max_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RunTimeParams::clear_object_max_num() {
  object_max_num_ = 32;
  clear_has_object_max_num();
}
inline ::google::protobuf::int32 RunTimeParams::object_max_num() const {
  // @@protoc_insertion_point(field_get:ocean.ai.va.RunTimeParams.object_max_num)
  return object_max_num_;
}
inline void RunTimeParams::set_object_max_num(::google::protobuf::int32 value) {
  set_has_object_max_num();
  object_max_num_ = value;
  // @@protoc_insertion_point(field_set:ocean.ai.va.RunTimeParams.object_max_num)
}

// optional int32 block_interval = 6 [default = 5];
inline bool RunTimeParams::has_block_interval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RunTimeParams::set_has_block_interval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RunTimeParams::clear_has_block_interval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RunTimeParams::clear_block_interval() {
  block_interval_ = 5;
  clear_has_block_interval();
}
inline ::google::protobuf::int32 RunTimeParams::block_interval() const {
  // @@protoc_insertion_point(field_get:ocean.ai.va.RunTimeParams.block_interval)
  return block_interval_;
}
inline void RunTimeParams::set_block_interval(::google::protobuf::int32 value) {
  set_has_block_interval();
  block_interval_ = value;
  // @@protoc_insertion_point(field_set:ocean.ai.va.RunTimeParams.block_interval)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace va
}  // namespace ai
}  // namespace ocean

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_configure_2eproto__INCLUDED
